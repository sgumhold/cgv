@=

::config_name=["Release","Debug","Release Dll","Debug Dll","Release Exe","Debug Exe"];
::link_inc=[1,2,1,2,1,2];
::use_lib_deps=[1,1,0,0,1,1];
::vs_platform = "Win32";
if (CGV_PLATFORM != "") {
	if (CGV_PLATFORM != "WIN32") {
		vs_platform = CGV_PLATFORM;
	}
}
rule_variable_map_vs = MAP.[
	["$(INPUT_DIR)", "$(InputDir)"],
	["$(INPUT_NAME)", "$(InputName)"],
	["$(INPUT_EXT)", "$(InputExt)"],
	["$(PROJECT_BUILD_DIR)", "$(ProjectDir)"],
	["$(BUILD_DIR)", "$(BUILD_DIR)/"],
	["$(CGV_INSTALL)", "$(CGV_INSTALL)/"],
	["$(CGV_DIR)", "$(CGV_DIR)/"]
];

rule_variable_map_vs10 = MAP.[
	["$(INPUT_DIR)", "%(RootDir)%(Directory)"],
	["$(INPUT_NAME)", "%(Filename)"],
	["$(INPUT_EXT)", "%(Extension)"],
	["$(PROJECT_BUILD_DIR)", "$(ProjectDir)"],
	["$(BUILD_DIR)", "$(BUILD_DIR)/"],
	["$(CGV_INSTALL)", "$(CGV_INSTALL)/"],
	["$(CGV_DIR)", "$(CGV_DIR)/"]
];

append_dep_types_config = [
	["library", "static_library", "shared_library", "plugin", "application_plugin"],
	["library", "static_library", "shared_library", "plugin", "application_plugin"],
	["library", "static_library", "shared_library"],
	["library", "static_library", "shared_library"]
];

func(::append_library_dependencies_vs; :>project_name = "", :>return="")
{
	:>pj =& projects[project_name];
	:>L =& pj::all_dep_projects;
	:>ci0 = 2;
	if (pj::is_executable[0]) {
		ci0 = 0;
	}
	for (:>ci=ci0; ci<4; ++ci) {
		for (:>i=0; i<!L; ++i) {
			if (projects[L[i]]::projectType < append_dep_types_config[ci]) {
				pj::dependencies[ci] = pj::dependencies[ci].[L[i].projects[L[i]]::output_post[ci]];
			}
		}
	}
}

func(::extend_project_info_vs; :>project_name = "", :>return = 1)
{
	:>pj =& projects[project_name];
	if(CGV_PLATFORM=="x64") {
		:>commonDefs=default_commonDefs.["WIN32", "WIN64", "_CRT_SECURE_NO_WARNINGS", "INPUT_DIR=".(pj::INPUT_DIR*"|\\|/|")];
	} else {
		:>commonDefs=default_commonDefs.["WIN32", "_CRT_SECURE_NO_WARNINGS", "INPUT_DIR=".(pj::INPUT_DIR*"|\\|/|")];
	}
	:>configDefs=[ default_configDefs[0].["NDEBUG"], default_configDefs[1].["_DEBUG","CGV_FORCE_STATIC"], 
		           default_configDefs[2].["NDEBUG"], default_configDefs[3].["_DEBUG"], 
				   default_configDefs[4].["NDEBUG"], default_configDefs[5].["_DEBUG"] ];
	if (pj::defines ~~ UNDEF) {
		pj::defines = [[],[],[],[]];
	}
	if (!pj::config_indices == 6) {
		pj::defines = pj::defines.[ pj::defines[0], pj::defines[1] ];
	}
	:>post = ["s", "sd", "", "d", "", "d"];
	pj::runtime_lib_vs10 = ["MultiThreaded", "MultiThreadedDebug", "MultiThreadedDLL", "MultiThreadedDebugDLL", "MultiThreaded", "MultiThreadedDebug"];
	pj::debug_info_vs10  = ["", "EditAndContinue", "", "EditAndContinue", "", "EditAndContinue"];
	if (CGV_PLATFORM != "WIN32") {
		pj::debug_info_vs10  = ["", "ProgramDatabase", "", "ProgramDatabase", "", "ProgramDatabase"];
	}

	pj::sub_system       = [1,1,1,1,1,1];
	pj::sub_system_vs10  = ["","","","","",""];
	pj::config_type      = [4,4,2,2,1,1];
	pj::config_type_vs10 = ["","","","","",""];
	pj::output_ext       = ["","","","","",""];
	pj::output_post      = ["","","","","",""];
	pj::output_dir       = ["","","","","",""];
	pj::linker_tool      = ["","","","","",""];
	pj::linker_tool_vs10 = ["","","","","",""];
	if (pj::cudaEnabled) {
		if (env::CUDA_PATH ~~ UNDEF) {
			pj::cudaEnabled = (1 == 0);
			cout("As CUDA_PATH is empty, CUDA support turned off in project ".pj::projectName."\n");
		}
		else {
			pj::cudaVersion = env::CUDA_PATH + (2+!(env::CUDA_PATH - "/"));
		}
	}
	for (:>cj=0; cj<!pj::config_indices; ++cj) {
		:>configDefsAdd     = [];
		:>ci = pj::config_indices[cj];
		pj::output_post[ci] = platform_post."_".post[ci].cgv_compiler_version;
		if (pj::is_executable[ci]) {
			configDefsAdd            = ["_CONSOLE"];
			pj::sub_system[ci]       = 1;
			pj::sub_system_vs10[ci]  = pj::subsystem;
			pj::config_type[ci]      = 1;
			pj::config_type_vs10[ci] = "Application";
			pj::output_ext[ci]       = "exe";
			if (2*(ci/2) == ci) {
				pj::output_dir[ci]       = "bin/release".platform_post;
			}
			else {
				pj::output_dir[ci]       = "bin/debug".platform_post;
			}
			pj::linker_tool[ci]      = "VCLinkerTool";
			pj::linker_tool_vs10[ci] = "Link";
		}
		else {
			configDefsAdd            = ["_WINDOWS"];
			pj::sub_system[ci]       = 2;
			pj::sub_system_vs10[ci]  = "Windows";
			if (pj::is_shared[ci]) {
				configDefsAdd            = configDefsAdd.["_USRDLL"];
				pj::config_type[ci]      = 2;
				pj::config_type_vs10[ci] = "DynamicLibrary";
				pj::output_ext[ci]       = "dll";
				if (2*(ci/2) == ci) {
					pj::output_dir[ci]       = "bin/release".platform_post;
				}
				else {
					pj::output_dir[ci]       = "bin/debug".platform_post;
				}
				pj::linker_tool[ci]      = "VCLinkerTool";
				pj::linker_tool_vs10[ci] = "Link";
			}
			else {
				configDefsAdd            = configDefsAdd.["_LIB"];
				pj::config_type[ci]      = 4;
				pj::config_type_vs10[ci] = "StaticLibrary";
				pj::output_ext[ci]       = "lib";
				pj::output_dir[ci]       = "lib";
				pj::linker_tool[ci]      = "VCLibrarianTool";
				pj::linker_tool_vs10[ci] = "Lib";
			}
		}
		pj::defines[ci]     = commonDefs.configDefs[ci].configDefsAdd.pj::defines[ci];
	}
	if(pj::projectType=="tool") {
		pj::output_post[0]="";
		pj::output_dir[0]       = "bin";
	}
//	if (!pj::referenceDeps) {
		append_library_dependencies_vs(project_name);
//	}
	if (pj::cudaEnabled) {
		:>codeGenIsValid = FALSE;
		if (pj::cudaCodeGeneration !~ UNDEF) {
			:>needOptions = FALSE;
			codeGenIsValid = TRUE;
			pj::cudaCodeGenerationOptions = "";
			pj::cudaCodeGenerationVS = "";
			if (pj::cudaCodeGeneration ~~ STRING) {
				pj::cudaCodeGenerationOptions = "-arch=".pj::cudaCodeGeneration;
				needOptions = TRUE;
			}
			elif (pj::cudaCodeGeneration ~~ MAP && pj::cudaCodeGeneration::architecture ~~ STRING) {
				if (pj::cudaCodeGeneration::code ~~ LIST) {
					for (:>i=0; i<!pj::cudaCodeGeneration::code; ++i) {
						if (i > 0) {
							pj::cudaCodeGenerationVS = pj::cudaCodeGenerationVS.";";
						}
						pj::cudaCodeGenerationVS = pj::cudaCodeGenerationVS.pj::cudaCodeGeneration::architecture.",".pj::cudaCodeGeneration::code[i];
					}
				}
				elif (pj::cudaCodeGeneration::code ~~ STRING) {
					pj::cudaCodeGenerationVS = pj::cudaCodeGeneration::architecture.",".pj::cudaCodeGeneration::code;
				}
				else {
					pj::cudaCodeGenerationOptions = "-arch=".pj::cudaCodeGeneration::architecture;				
					needOptions = TRUE;
				}
			}
			else {
				codeGenIsValid = FALSE;
			}
			if (codeGenIsValid) {
				if (needOptions) {
					pj::cudaCodeGenerationVS = "";
				}
				else {
					pj::cudaCodeGenerationOptions = "";
				}
			}
		}
		if (!codeGenIsValid) {
			pj::cudaCodeGenerationOptions = "-arch=native";
			pj::cudaCodeGenerationVS = "";
		}
		//cout("cuOptions = ".pj::cudaCodeGenerationOptions."\ncuVS = ".pj::cudaCodeGenerationVS."\n");
	}
}

func(::get_rule_id_vs10; :>pj=MAP, :>ext="", :>return="")
{
	return = get_rule_id(<:pj =& pj, <:ext=ext);
	if (return == "sources_rule") {
		return = "ClCompile";
	}
	elif (return == "cuda_rule") {
		return = "CudaCompile";
	}
	elif (return == "headers_rule" && !check_is_rule(pj,ext)) {
		return = "ClInclude";
	}
	elif (return == "resources_rule" && !check_is_rule(pj,ext)) {
		return = "ResourceCompile";
	}
	elif (return == "icons_rule" && !check_is_rule(pj,ext)) {
		return = "Image";
	}
	elif (!check_is_rule(<:pj =& pj, <:ext = ext)) {
		return ="None";
	}
}

func(::sort_files_by_rule_id_rec; :>pj = MAP, :>T = MAP, :>excl_cfg_idxs = [], :>return="")
{
	update_excl_cfg_idxs(<:T =& T, <:excl_cfg_idxs =& excl_cfg_idxs);
	for(:>i=0; i<!T; ++i){
		:>fn = get_folder_name(<:T =& T, <:i=i, <:excl_cfg_idxs =& excl_cfg_idxs);
		if (fn) {
			sort_files_by_rule_id_rec(<:pj =& pj, <:T =& T[T[i]], <:excl_cfg_idxs = excl_cfg_idxs);
		}
		:>excl_idxs = excl_cfg_idxs;
		:>gen_ph = 0;
		fn = get_src_file_name(<:T =& T, <:i = i, <:excl_cfg_idxs =& excl_cfg_idxs, <:excl_idxs =& excl_idxs, <:gen_ph =& gen_ph);
		if (fn) {
			:>rule_id = get_rule_id_vs10(<:pj =& pj, <:ext = get_extension(fn));
			if (!excl_idxs == 0 && !gen_ph) {
				:>file_entry = fn;
			}
			else {
				:>file_entry = [ fn, excl_idxs, gen_ph ];
			}
			if (pj::file_by_rule[rule_id] ~~ UNDEF) {
				pj::file_by_rule[rule_id] = [file_entry];
			}
			else {
				pj::file_by_rule[rule_id] = pj::file_by_rule[rule_id].[file_entry];
			}
		}
	}
}

func(::sort_files_by_rule_id; :>pj=MAP, :>return="")
{
	if (pj::file_by_rule ~~ UNDEF) {
		pj::file_by_rule = MAP;
	}
	sort_files_by_rule_id_rec(<:pj =& pj, <:T =& pj::sourceTree, <:excl_cfg_idxs = []);
}