@=

if (TRUE ~~ UNDEF) {
	cout("HINT: Please update cgv framework to get new ppp version.\n");
	TRUE = (1 == 1);
}
if (FALSE ~~ UNDEF) {
	FALSE = (1 == 0);
}

// define the project independent variables
//
// CGV_COMPILER, CGV_COMPILER_VERSION, CGV_IDE
//
// rules, mapDeps, excludeProjectDeps

// define the cgv directory from the environment variable
if(CGV_DIR ~~ UNDEF) {
	if(env::CGV_DIR ~~ UNDEF) {
		error(0; "essential environment variable CGV_DIR not defined!\n");
		exit(-1)
	} else {
		CGV_DIR = env::CGV_DIR
	}
}
// define the build directory from the environment variable or the CGV_DIR
if (env::CGV_BUILD ~~ UNDEF) {
	CGV_BUILD = CGV_DIR
} else {
	CGV_BUILD = env::CGV_BUILD
}
// define the install directory from the environment variable or the CGV_DIR
if(env::CGV_INSTALL ~~ UNDEF) {
	CGV_INSTALL = CGV_DIR+"/build"
} else {
	CGV_INSTALL = env::CGV_INSTALL
}
// define the data directory from the environment variable or the CGV_DATA
if(env::CGV_DATA !~ UNDEF) {
	CGV_DATA = env::CGV_DATA
}
// define the data directory from the environment variable or the CGV_DATA
if(env::CGV_SUPPORT_DIR !~ UNDEF) {
	CGV_SUPPORT_DIR = env::CGV_SUPPORT_DIR
}
//define CGV_COMPILER from environment or system specific defaults, which
//are vs9 under windows and gcc under linux. Finally, set the compiler version
//number, i.e. 8, 9, 10, 11, 12, 14, 141 for vs8, vs9, vs10, vs11, vs12, vs14, vs141, vs142, vs143
if(CGV_COMPILER ~~ UNDEF) {
	if(env::CGV_COMPILER) {
		CGV_COMPILER=env::CGV_COMPILER
	} else {
		if (SYSTEM == "windows") {
			CGV_COMPILER="vs143"
		} else {
			CGV_COMPILER="gcc"
		}
	}
}

//define CGV_IDE from environment or system specific defaults
if(CGV_IDE ~~ UNDEF) {
	if(env::CGV_IDE) {
		CGV_IDE=env::CGV_IDE
	} else {
		if (CGV_COMPILER-((!CGV_COMPILER)-2) == "vs") {
			CGV_IDE="visual studio"
		}
	}
}
// default windows sdk version to latest version
if(CGV_COMPILER=="vs143") {
	CGV_WINDOWS_SDK="10.0";
}
elif(CGV_COMPILER=="vs142") {
	CGV_WINDOWS_SDK="10.0.18362.0";
}
else {
	CGV_WINDOWS_SDK="10.0.17763.0";
}
if (env::CGV_WINDOWS_SDK !~ UNDEF) {
	CGV_WINDOWS_SDK=env::CGV_WINDOWS_SDK;
}

//define platform 
CGV_PLATFORM="";
if (env::CGV_PLATFORM !~ UNDEF) {
	CGV_PLATFORM=env::CGV_PLATFORM;
}
if (SYSTEM == "windows") {
	if (CGV_PLATFORM == "") {
		CGV_PLATFORM = "WIN32";
	}
}
platform_post = "";
if (CGV_PLATFORM != "WIN32") {
	if (CGV_PLATFORM == "x64") {
		platform_post = "64";
	}
	else {
		platform_post = CGV_PLATFORM;
	}
}
cout("platform=".CGV_PLATFORM." with postfix ".platform_post."\n");

CGV_CHARSET="Unicode";
if (env::CGV_CHARSET !~ UNDEF) {
	CGV_CHARSET=env::CGV_CHARSET;
}
CGV_STDCPP="";
if (env::CGV_OPTIONS !~ UNDEF) {
	if ( (env::CGV_OPTIONS*"/STDCPP17//") != env::CGV_OPTIONS) {
		CGV_STDCPP="stdcpp17";
	}
}
CGV_OPENMP=0;
if (env::CGV_OPTIONS !~ UNDEF) {
	if ( (env::CGV_OPTIONS*"/OPENMP//") != env::CGV_OPTIONS) {
		CGV_OPENMP=1;
	}
}
//define output directory of the generated target files 
CGV_BUILD_DIR = CGV_BUILD.'/'.CGV_COMPILER;
if (CGV_IDE ~~ STRING) {
	if (CGV_IDE == "eclipse") {
		CGV_BUILD_DIR = CGV_BUILD.'/'.CGV_IDE;
	}
}
if (SYSTEM == "windows") {
	if (CGV_PLATFORM != "WIN32") {
		CGV_BUILD_DIR = CGV_BUILD_DIR.'_'.CGV_PLATFORM;
	}
}

cgv_compiler_version = -1;
vs_version = -1;
vs_file_format = 11;
project_folder_support=1;
if (CGV_COMPILER == "vs8") {
	cgv_compiler_version = 8;
	project_folder_support=1;
	vs_version = 2005;
}
elif (CGV_COMPILER == "vs9") {
	cgv_compiler_version = 9;
	project_folder_support=1;
	vs_version = 2008;
}
elif (CGV_COMPILER == "vs9e") {
	cgv_compiler_version = 9;
	project_folder_support=0;
	vs_version = 2008;
}
elif (CGV_COMPILER == "vs10") {
	cgv_compiler_version = 10;
	project_folder_support=1;
	vs_version = 2010;
}
elif (CGV_COMPILER == "vs11") {
	cgv_compiler_version = 11;
	project_folder_support=1;
	vs_version = 2012;
}
elif (CGV_COMPILER == "vs12") {
	cgv_compiler_version = 12;
	project_folder_support=1;
	vs_version = 2013;
}
elif (CGV_COMPILER == "vs14") {
	cgv_compiler_version = 14;
	project_folder_support=1;
	vs_version = 2015;
}
elif (CGV_COMPILER == "vs141") {
	cgv_compiler_version = 141;
	project_folder_support=1;
	vs_version = 15;
	vs_file_format = 12;
}
elif (CGV_COMPILER == "vs142") {
	cgv_compiler_version = 142;
	project_folder_support=1;
	vs_version = "Version 16";
	vs_file_format = 12;
}
elif (CGV_COMPILER == "vs143") {
	cgv_compiler_version = 143;
	project_folder_support=1;
	vs_version = "Version 16";
	vs_file_format = 12;
}

rules = [
	MAP.[ 
		["extensions",["bmp","jpg","jpeg","png","tif","tiff","avi","gif","ani","wav"]],
		["folder","resources"],
		["tool","res_prep"],
		["rules", 
			[ 
				MAP.[
					["keep_extension",1],
		            ["extension","cxx"],
			        ["path","$(PROJECT_BUILD_DIR)"] 
			    ]
			] 
		], 
		["command", ["res_prep", 0, 1] ]
	],
	MAP.[
		["extensions",["txt"]],
		["folder","text"],
		["tool","res_prep"], 
		["rules", 
			[ 
				MAP.[
		            ["extension","h"],
			        ["path","$(PROJECT_BUILD_DIR)"] 
			    ]
			] 
		],
		["command", ["res_prep", 0, 1] ]
	],
	MAP.[
		["extensions",["ph"]],
		["name","ppp_headers"],
		["folder","ppp"],
		["rules", 
			[
				MAP.[
					["extension", "h"] 
				] 
			] 
		], 
		["command", ["ppp", 0, 1] ]
	],
	MAP.[ 
		["extensions",["pj"]],
		["folder","make"],
		["excl_cfg_idxs", [0,1,2,3,4,5] ],
		["rules", 
			[ 
				MAP.[ 
					["extension","sln"], 
			        ["path","$(PROJECT_BUILD_DIR)"] 
				]
			]
		],
		["command", ["ppp", "-script", "-CGV_COMPILER=".CGV_COMPILER, "$(CGV_DIR)make\ppp\templates\make.ppp", 0 ] 
		]
	],
	MAP.[ 
		["extensions",["h", "hh", "hxx", "hpp"]],
		["folder","headers"] 
	],
	MAP.[ 
		["extensions",["ico"]],
		["folder","icons"] 
	],
	MAP.[ 
		["extensions",["rc"]],
		["folder","resources"] 
	],
	MAP.[
		["extensions",["ppp"]],
		["folder","ppp"]
	],
	MAP.[
		["extensions",["cxx", "cc", "c", "c++", "cpp"]],
		["folder","sources"] 
	],
	MAP.[
		["extensions",["dox", "doc"]],
		["folder","doxygen"],
		["rules", 
			[
				MAP.[
					["exclude", 1],
					["extension", "html"], 
					["name", "index"], 
					["path", "$(PROJECT_BUILD_DIR)html"]
				]
			] 
		], 
		["command", ["doxygen", 0] ]
	],
	MAP.[
		["extensions",["tex"]],
		["folder","latex"],
		["rules", 
			[
				MAP.[
					["exclude", 1],
					["extension", "pdf"]
				]
			] 
		], 
		["command", ["pdflatex", "-include-directory=$(INPUT_DIR)", 0] ]
	],
	MAP.[
		["extensions",["gui"]],
		["folder","gui"] 
	],
	MAP.[ 
		["extensions",["def", "cfg"]],
		["folder","config"]
	]
];
ruleFiles = [];

mapDeps=MAP;
if (SYSTEM == "windows") {
	mapDeps::opengl = ["opengl32","opengl32","opengl32","opengl32"];
	mapDeps::glu    = ["glu32","glu32","glu32","glu32"];
	mapDeps::glew   = ["glew32","glew32","glew32.dll","glew32.dll"];
}

excludeProjectDeps = [];
if (SYSTEM == "linux") {
	excludeProjectDeps=["fltk","pthread","libjpeg","libpng","zlib","libtiff"];
}
project_folders=["plugin","application_plugin","test","application","library","static_library","shared_library","shared_plugin","tool"];

// encoding and decoding of refernces

// encode in a list that text should be placed after ref
func(after; :>text="", :>ref = "", :>return="") 
{
	return = ['"'.text.'"', "AFTER", ref];
}

// encode in a list that text should be placed before ref
func(before; :>text="", :>ref = "", :>return="") 
{
	return = ['"'.text.'"', "BEFORE", ref];
}

// check whether an element has an encoded reference and return "" if not or the type of reference "AFTER" or "BEFORE"
func(before_or_after; :>elem = "", :>return="") 
{
	if (elem ~~ LIST) {
		if (!elem == 3) {
			if (elem[1] < ["AFTER", "BEFORE"]) {
				return = elem[1];
			}
		}
	}
}

// only call in case before_or_after does not return UNDEF. In this case the encoded reference is returned
func(get_reference; :>elem = [], :>return = "") 
{
	:>return = elem[2];
}

