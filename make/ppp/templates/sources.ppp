@=

include "projects.ppp"

func(collect_source_file; :>file = "", :>pj = MAP, :>T=MAP, :>return = 0)
{
	//cout("     file: ".file."\n");
	file = file*clean_path;
	if (!(file < pj::excludeSourceFiles) && !(drop_path(file) < pj::excludeSourceFiles)) {
		:>ext = get_extension(file);
		if (pj::rules) {
			:>R =& pj::rules;

			for (:>r=0; r<!R; ++r) {
				if (ext < R[r]::extensions) {
					// determine folder
					:>folder = R[r]::folder;
					if (T[folder] ~~ MAP) {
						folder = folder."_rule";
					}
					// ensure that folder entry is initialized
					if (T[folder] ~~ UNDEF) {
						T[folder] = [];
					}
					// check if file has been added to folder before
					:>found = 0;
					for (:>k=0; k<!T[folder]; ++k) {
						if (T[folder][k] ~~ LIST) {
							if (T[folder][k][0] == file) {
								found = 1;
							}
						}
						else {
							if (T[folder][k] == file) {
								found = 1;
							}
						}
					}
					if (!found) {
						// add file to folder, potentially with excl_cfg_idxs
						if (R[r]::excl_cfg_idxs ~~ LIST) {
							:>L = [];
							for (:>k=0; k<!R[r]::excl_cfg_idxs; ++k) {
								if (R[r]::excl_cfg_idxs[k] < pj::config_indices) {
									L = L.[R[r]::excl_cfg_idxs[k]];
								}
							}
							T[folder] = T[folder].[ [file, L] ];
						}
						else {
							if (ph_detect_hdr && (folder == "headers") && (drop_path(file) == pj::projectName."_ph.h")) {
								pj::ph_hdr_file_name = file;
							}
							T[folder] = T[folder].file;
						}
						// return that file has been added
						return = 1;
						// ensure that project depends on tool projects
						if (R[r]::tool !~ UNDEF) {
							if (!(R[r]::tool < tool_list)) {
								tool_list = tool_list.[R[r]::tool];
							}
							if (pj::projectDeps !~ LIST) {
								pj::projectDeps= [];
							}
							if (!(R[r]::tool < pj::projectDeps)) {
								pj::projectDeps = pj::projectDeps.R[r]::tool;
							}
						}
						// add files generated by rule to project recursively
						if (R[r]::rules ~~ LIST) {
							rule_variable_map["$(INPUT_DIR)"] = get_path(file)."/";
							rule_variable_map["$(INPUT_NAME)"] = drop_path(file) - ".";
							rule_variable_map["$(INPUT_EXT)"] = ".".get_extension(file);
							rule_variable_map["$(PROJECT_BUILD_DIR)"] = pj::build_dir."/";
							rule_variable_map["$(BUILD_DIR)"] = CGV_BUILD."/";
							rule_variable_map["$(CGV_INSTALL)"] = CGV_INSTALL."/";
							rule_variable_map["$(CGV_DIR)"] = CGV_DIR."/";

							// iterate rules
							for(:>rj=0; rj<!(R[r]::rules); ++rj) {
								:>rule = (R[r]::rules)[rj];
								:>do_exclude=0;
								if (rule::exclude) {
									if (rule::exclude == 1) {
										do_exclude=1;
									}
								}
								if (!do_exclude) {
									new_file_name = rule_target(<:R =& R[r], <:i = rj);
									collect_source_file(<:file = new_file_name, <:pj =& pj, <:T =& T);
								}
							}
						}
					}
				}
			}
		}
	}
}

func(collect_source_files; :>dir = "", :>projectName = "", :>return = MAP)
{
	:>pj =& projects[projectName];
	//cout("  dir: ".dir."\n");
	// recursively collect source files
	:>T = MAP;
	:>subdirs = [];
	dir(dir;".";0;subdirs);
	for (:>i=0; i<!subdirs; ++i) {
		if (!(subdirs[i][1]*clean_path < pj::excludeSourceDirs) && !(drop_path(subdirs[i][1])*clean_path < pj::excludeSourceDirs)) {
			T[subdirs[i][0]] = collect_source_files(subdirs[i][1], projectName);
		}
	}
	:>files = [];
	dir(dir;"*.*";0;files);
	for (:>i=0; i<!files; ++i) {
		collect_source_file(<:file = files[i][1], <:pj =& pj, <:T =& T);
	}
	return = T;
}

// read a project file from disk and store defines in returned map
func(collect_sources; :>projectName = "", :>return = 1)
{
	:>pj =& projects[projectName];
	if (pj::sourceTree ~~ UNDEF) {
		if (debug_make) {
			cout("collect sources of ".projectName."\n");
			//cout(pj::rules);cout("\n");
		}
		pj::sourceTree = MAP;
		// analyze general structure
		:>is_forest = 0;
		if( (!pj::sourceDirs > 1) || ( (!pj::sourceFiles > 0) && (!pj::sourceDirs > 0) ) ) {
			is_forest = 1;
		}
		:>T =& pj::sourceTree;
		// go through all source directories
		for(:>dir=0;dir<(!pj::sourceDirs);++dir) {
			:>D = pj::sourceDirs[dir];
			:>P = D - "/\\:";
			if (P != D) {
				D = D + (!P+1);
			}
			if (is_forest) {
				T[D] = collect_source_files(pj::sourceDirs[dir], projectName);
			}
			else {
				T = collect_source_files(pj::sourceDirs[dir], projectName);
			}
		}
		// go through individually specified source files
		for(:>f=0;f<(!pj::sourceFiles);++f) {
			// if no path specified, assume input path
			:>fn = pj::sourceFiles[f];
			if (fn == drop_path(fn)) {
				fn = pj::INPUT_DIR."/".fn;
			}
			collect_source_file(<:file = fn, <:pj =& pj, <:T =& T);
		}
	}
	else {
		return = 0;
	}
}

func(update_excl_cfg_idxs; :>T = MAP, :>excl_cfg_idxs = [], :>return="")
{
	if (T ~~ MAP) {
		if (T::excl_cfg_idxs !~ UNDEF) {
			excl_cfg_idxs = T::excl_cfg_idxs;
		}
	}
}

func(get_folder_name; :>T = MAP, :>i = 0, :>excl_cfg_idxs = [], :>return="")
{
	if (T ~~ MAP){
		if (T[i] != "excl_cfg_idxs") {
			return = T[i];
		}
	}
}

func(get_src_file_name; :>T = MAP, :>i = 0, :>excl_cfg_idxs = [], :>excl_idxs = [], :>gen_ph = 0, :>return="")
{
	if (T ~~ LIST) {
		if (T[i] ~~ LIST) {
			:>is_type_1 = 1;
			if (!T[i] == 2) {
				if (T[i][0] ~~ STRING) {
					return = T[i][0];
					is_type_1 = 0;
					if (T[i][1] ~~ STRING) {
						if (T[i][1] == "gen_ph") {
							gen_ph = 1;
						}
						elif (T[i][1] == "no_ph") {
							gen_ph = 2;
						}
						else {
							error(0; "unknown option ".T[i][1]." for source file ".T[i][0]);
						}
					}
					else {
						excl_idxs = T[i][1];
					}
				}
			}
			if (is_type_1) {
				excl_cfg_idxs = T[i];
			}
		}
		else {
			return = T[i];
		}
	}
}
