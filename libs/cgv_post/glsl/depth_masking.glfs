#version 430

layout (binding = 0) uniform sampler2D color_tex;
layout (binding = 1) uniform sampler2D depth_tex;
layout (binding = 2) uniform sampler2D linear_depth_tex;
layout (binding = 3) uniform sampler2D blurred_depth_tex;

uniform float z_near;
uniform float z_far;
uniform int mode;
uniform float strength_scale;
uniform vec3 inside_color;
uniform vec3 outside_color;
uniform bool tint_colors;
uniform bool clamp_output;

in vec2 texcoord_fs;

layout(location = 0) out vec4 frag_color;

void main()
{
	vec4 color = texture(color_tex, texcoord_fs);
	float depth = texture(depth_tex, texcoord_fs).r;
	float linear_depth = texture(linear_depth_tex, texcoord_fs).r;
	float blurred_depth = texture(blurred_depth_tex, texcoord_fs).r;

	float spatial_importance = blurred_depth - linear_depth;
	
	vec3 adjusted_color = color.rgb;

	switch(mode) {
	case 0:
	{
		// I - dD+ * lambda
		float factor = max(spatial_importance, 0.0) * strength_scale;
		if(tint_colors)
			adjusted_color = mix(adjusted_color, inside_color, factor);
		else
			adjusted_color -= factor;
	}
		break;
	case 1:
	{
		// I + dD- * lambda
		float factor = min(spatial_importance, 0.0) * strength_scale;
		if(tint_colors)
			adjusted_color = mix(adjusted_color, outside_color, -factor);
		else
			adjusted_color += factor;
	}
		break;
	case 2:
	{
		// I - |dD| * lambda
		float factor = abs(spatial_importance) * strength_scale;
		if(tint_colors)
			adjusted_color = mix(adjusted_color, outside_color, factor);
		else
			adjusted_color -= factor;
	}
		break;
	case 3:
		// I + (dD- * Ci + dD+ * Co) * lambda
		if(tint_colors)
			adjusted_color = spatial_importance < 0.0 ?
				mix(adjusted_color, outside_color, -spatial_importance * strength_scale) :
				mix(adjusted_color, inside_color, spatial_importance * strength_scale);
		else
			adjusted_color += spatial_importance * strength_scale;
		break;
	default:
		break;
	}
	
	if(clamp_output)
		adjusted_color = clamp(adjusted_color, 0.0, 1.0);

	frag_color = vec4(adjusted_color, color.a);
	gl_FragDepth = depth;
}
