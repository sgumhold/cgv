#version 430

#define CHANNELS 4
#define AXIS 0

#if CHANNELS == 1
	#define DATA_TYPE float
	#define SWIZZLE_MASK r
#elif CHANNELS == 2
	#define DATA_TYPE vec2
	#define SWIZZLE_MASK rg
#elif CHANNELS == 3
	#define DATA_TYPE vec3
	#define SWIZZLE_MASK rgb
#else
	#define DATA_TYPE vec4
	#define SWIZZLE_MASK rgba
#endif

layout (binding = 0) uniform sampler2D input_tex;

uniform int radius;

in vec2 texcoord_fs;

layout(location = 0) out vec4 frag_color;

void main()
{
	vec2 texel_size = 1.0 / textureSize(input_tex, 0);

	DATA_TYPE value_sum = DATA_TYPE(0.0);

	float size = float(2 * radius + 1);

	for(int i = -radius; i <= radius; ++i) {
		#if AXIS == 0
			vec2 offset = vec2(i * texel_size.x, 0);
		#else
			vec2 offset = vec2(0, i * texel_size.y);
		#endif

		vec2 sample_coords = texcoord_fs + offset;
		value_sum += texture(input_tex, sample_coords).SWIZZLE_MASK;
	}

	frag_color = vec4(value_sum / size);
}
