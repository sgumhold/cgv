#version 430

#define CHANNELS 4
#define USE_WEIGHTS 0

#if CHANNELS == 1
	#define DATA_TYPE float
	#define SWIZZLE_MASK r
#elif CHANNELS == 2
	#define DATA_TYPE vec2
	#define SWIZZLE_MASK rg
#elif CHANNELS == 3
	#define DATA_TYPE vec3
	#define SWIZZLE_MASK rgb
#else
	#define DATA_TYPE vec4
	#define SWIZZLE_MASK rgba
#endif

layout (binding = 0) uniform sampler2D input_tex;
#if USE_WEIGHTS == 1
layout (binding = 1) uniform sampler2D weight_tex;
#endif

uniform int radius;

in vec2 texcoord_fs;

layout(location = 0) out vec4 frag_color;

void main()
{
	vec2 texel_size = 1.0 / textureSize(input_tex, 0);

	DATA_TYPE value_sum = DATA_TYPE(0.0);

	float size = float(2 * radius + 1);
	float weight_sum = size * size;

#if USE_WEIGHTS == 1
	weight_sum = 0.0;
#endif

	for(int y = -radius; y <= radius; ++y) {
		for(int x = -radius; x <= radius; ++x) {
			vec2 offset = texel_size * vec2(x, y);
			vec2 sample_coords = texcoord_fs + offset;
			DATA_TYPE value = texture(input_tex, sample_coords).SWIZZLE_MASK;

			#if USE_WEIGHTS == 1
				float weight = texture(weight_tex, sample_coords).r;
				weight_sum += weight;
				value *= weight;
			#endif

			value_sum += value;
		}
	}

	if(weight_sum == 0.0)
		value_sum = texture(input_tex, texcoord_fs).SWIZZLE_MASK;
	else
		value_sum /= weight_sum;

	frag_color = vec4(value_sum);
}
