#version 430

#define MODE 1

//***** begin interface of shape2d.glsl ***********************************
uniform bool origin_top_left = false;

float get_feather_width();
vec2 get_shape_size();
vec4 get_color();
vec4 transform_world_to_window_space(vec2 p);
//***** end interface of shape2d.glsl ***********************************

//***** begin interface of quadratic_bezier2d.glsl ***********************************
vec4 compute_quadratic_bezier_bounding_box(in vec2 p0, in vec2 p1, in vec2 p2);
//***** end interface of quadratic_bezier2d.glsl ***********************************

#if MODE == 0
layout(points) in;
#else
layout(triangles) in;
#endif
layout(triangle_strip, max_vertices = 4) out;

struct quadratic_segment {
	vec2 s;
	vec2 h;
	vec2 e;
};

const vec2 corners[4] = vec2[](
	vec2(0.0, 0.0),
	vec2(1.0, 0.0),
	vec2(0.0, 1.0),
	vec2(1.0, 1.0)
);

uniform float width = 1.0;

#if MODE == 0
flat in vec4 position2_gs[];
#endif
flat in vec4 color_gs[];

out flat vec4 color0_fs;
out flat vec4 color1_fs;
out flat vec4 color2_fs;
out flat vec2 size_fs;
out vec2 tex_coord_fs;
out vec2 pix_coord_fs;
out flat vec2 pos_a_fs;
out flat vec2 pos_b_fs;
out flat vec2 pos_c_fs;

void emit_corner(in int id, in vec2 origin, in vec2 position) {
	tex_coord_fs = corners[id];
	pix_coord_fs = size_fs*corners[id] + origin;
	gl_Position = transform_world_to_window_space(position);
	EmitVertex();
}

void emit_bounding_box(vec4 box) {

	float final_width = width + get_feather_width();

	// incorporate feather_width
	box.xy -= 0.5*final_width;
	box.zw += 0.5*final_width;

	if(origin_top_left) {
		float temp = box.y;
		box.y = box.w;
		box.w = temp;
	}

	size_fs = box.zw - box.xy;

	emit_corner(0, box.xy, box.xy);
	emit_corner(1, box.xy, box.zy);
	emit_corner(2, box.xy, box.xw);
	emit_corner(3, box.xy, box.zw);
}

void main() {
	
	quadratic_segment qseg;

#if MODE == 0
	qseg.s = gl_in[0].gl_Position.xy;
	qseg.h = gl_in[0].gl_Position.zw;
	qseg.e = position2_gs[0].xy;
#else
	qseg.s = gl_in[0].gl_Position.xy;
	qseg.h = gl_in[1].gl_Position.xy;
	qseg.e = gl_in[2].gl_Position.xy;
#endif

	pos_a_fs = qseg.s;
	pos_b_fs = qseg.h;
	pos_c_fs = qseg.e;

#if MODE == 0
	color0_fs = color_gs[0];
	color1_fs = color_gs[0];
	color2_fs = color_gs[0];
#else
	color0_fs = color_gs[0];
	color1_fs = color_gs[1];
	color2_fs = color_gs[2];
#endif

	emit_bounding_box(compute_quadratic_bezier_bounding_box(qseg.s, qseg.h, qseg.e));
}
