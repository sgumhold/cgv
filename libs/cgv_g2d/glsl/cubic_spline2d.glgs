#version 430

#define MODE 1
// WARNING: Setting SPLIT_SEGMENT to 1 will split the cubic segment into two
// quadratic segments to produce 2 smaller bounding boxes per quadratic segment.
// This reduces the amount of produced fragments. The fragemnt shader will, however,
// still evaluate the whole cubic segment. This will result in artifacts when
// using dashed line styles as the two bounding boxes overlap to accomodate the
// line thickness.
#define SPLIT_SEGMENT 0

//***** begin interface of shape2d.glsl ***********************************
uniform bool origin_top_left = false;

float get_feather_width();
vec2 get_shape_size();
vec4 get_color();
vec4 transform_world_to_window_space(vec2 p);
//***** end interface of shape2d.glsl ***********************************

//***** begin interface of quadratic_bezier2d.glsl ***********************************
vec4 compute_quadratic_bezier_bounding_box(in vec2 p0, in vec2 p1, in vec2 p2);
//***** end interface of quadratic_bezier2d.glsl ***********************************

#if MODE == 0
layout(points) in;
#else
layout(lines) in;
#endif
#if SPLIT_SEGMENT == 0
layout(triangle_strip, max_vertices = 4) out;
#else
layout(triangle_strip, max_vertices = 8) out;
#endif

struct cubic_node {
	vec2 position;
	vec2 tangent;
};

struct cubic_segment {
	cubic_node s;
	cubic_node e;
};

struct quadratic_segment {
	vec2 s;
	vec2 h;
	vec2 e;
};

const vec2 corners[4] = vec2[](
	vec2(0.0, 0.0),
	vec2(1.0, 0.0),
	vec2(0.0, 1.0),
	vec2(1.0, 1.0)
);

uniform float width = 1.0;

#if MODE == 0
flat in vec4 position23_gs[];
#endif
flat in vec4 color_gs[];

out flat vec4 color0_fs;
out flat vec4 color1_fs;
out flat vec2 size_fs;
out vec2 tex_coord_fs;
out vec2 pix_coord_fs;
out flat vec2 pos_a_fs;
out flat vec2 pos_b_fs;
out flat vec2 pos_c_fs;
out flat vec2 pos_d_fs;
out flat vec2 pos_e_fs;

#define DEF_split_curve(T)						\
void split_curve(T v0, T d0, T v1, T d1,		\
	out T v00_out, out T h0_out, out T v10_out,	\
	out T v01_out, out T h1_out, out T v11_out)	\
{												\
	v00_out = v0;								\
	h0_out = v0 + d0 * 0.25;					\
	T h1 = v1 - d1 * 0.25;						\
	v10_out = (h0_out + h1) * 0.5;				\
												\
	v01_out = v10_out;							\
	h1_out = h1;								\
	v11_out = v1;								\
}

DEF_split_curve(vec2)

#define SPLIT_CURVE(TUBE, MEM_V, MEM_D, QTUBE0, QTUBE1)		\
split_curve(												\
	TUBE.s.MEM_V, TUBE.s.MEM_D, TUBE.e.MEM_V, TUBE.e.MEM_D,	\
	QTUBE0.s, QTUBE0.h, QTUBE0.e,							\
	QTUBE1.s, QTUBE1.h, QTUBE1.e							\
)

void split_cubic_segment(in cubic_segment cseg, out quadratic_segment qseg0, out quadratic_segment qseg1) {
	SPLIT_CURVE(cseg, position, tangent, qseg0, qseg1);
}

void emit_corner(in int id, in vec2 origin, in vec2 position) {
	tex_coord_fs = corners[id];
	pix_coord_fs = size_fs*corners[id] + origin;
	gl_Position = transform_world_to_window_space(position);
	EmitVertex();
}

void emit_bounding_box(vec4 box) {

	float final_width = width + get_feather_width();

	// incorporate feather_width
	box.xy -= 0.5*final_width;
	box.zw += 0.5*final_width;

	if(origin_top_left) {
		float temp = box.y;
		box.y = box.w;
		box.w = temp;
	}

	size_fs = box.zw - box.xy;

	emit_corner(0, box.xy, box.xy);
	emit_corner(1, box.xy, box.zy);
	emit_corner(2, box.xy, box.xw);
	emit_corner(3, box.xy, box.zw);
}

void main() {
	
	cubic_segment cseg;

#if MODE == 0
	cseg.s.position = gl_in[0].gl_Position.xy;
	cseg.s.tangent = gl_in[0].gl_Position.zw;
	cseg.e.position = position23_gs[0].xy;
	cseg.e.tangent = position23_gs[0].zw;
#else
	cseg.s.position = gl_in[0].gl_Position.xy;
	cseg.s.tangent = gl_in[0].gl_Position.zw;
	cseg.e.position = gl_in[1].gl_Position.xy;
	cseg.e.tangent = gl_in[1].gl_Position.zw;
#endif

	quadratic_segment qseg0, qseg1;
	split_cubic_segment(cseg, qseg0, qseg1);
	
	pos_a_fs = qseg0.s;
	pos_b_fs = qseg0.h;
	pos_c_fs = qseg0.e;
	pos_d_fs = qseg1.h;
	pos_e_fs = qseg1.e;

#if MODE == 0
	color0_fs = color_gs[0];
	color1_fs = color_gs[0];
#else
	color0_fs = color_gs[0];
	color1_fs = color_gs[1];
#endif

	vec4 box0 = compute_quadratic_bezier_bounding_box(qseg0.s, qseg0.h, qseg0.e);
	vec4 box1 = compute_quadratic_bezier_bounding_box(qseg1.s, qseg1.h, qseg1.e);

#if SPLIT_SEGMENT == 0
	// a single bounding box for the whole cubic spline segment
	vec4 box;
	box.xy = min(box0.xy, box1.xy);
	box.zw = max(box0.zw, box1.zw);
	emit_bounding_box(box);
#else
	// 2 bounding boxes for tighter approximation of screen coverage
	emit_bounding_box(box0);
	emit_bounding_box(box1);
#endif
}
